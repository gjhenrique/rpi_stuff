---
variables: vars.yml

templates:
  torrent:
    transmission:
      host: localhost
      port: 9091
      ratio: 1
      path: "{{ torrent_path }}"
      username: "{? transmission.username ?}"
      password: "{? transmission.password ?}"
      main_file_only: true
  notification:
    notify:
      entries:
        message: "{{ notification_message }}"
        via:
          - telegram:
              bot_token: "{? telegram.token ?}"
              parse_mode: html
              disable_previews: false
              recipients:
                - group: "{? telegram.group_name ?}"
  subtitle:
    accept_all: true
    seen: local
    subliminal:
      providers: "{? subliminal.providers ?}"
      languages: "{? subliminal.langs ?}"
      single: false
      authentication:
        opensubtitles:
          username: "{? subliminal.authentication.opensubtitles.username ?}"
          password: "{? subliminal.authentication.opensubtitles.password ?}"
        legendastv:
          username: "{? subliminal.authentication.legendastv.username ?}"
          password: "{? subliminal.authentication.legendastv.password ?}"
  rename-serie-name:
    set:
      trakt_series_name: "{{ trakt_series_name | replace('&', 'and') | replace(':', '')}}"

tasks:
  download-rss:
    priority: 1
    rss: "{? rss.tv_url ?}"
    all_series: true
    trakt_lookup: true
    set:
      torrent_path: "{? torrent.tv_path ?}"
      notification_message: "ðŸ§²: {{ trakt_series_name }} - s{{ trakt_season|pad(2) }}e{{ trakt_episode | pad(2) }}"
    template:
      - torrent
      - notification

  move-series-local:
    priority: 2
    disable: [seen, seen_info_hash, retry_failed]
    filesystem:
      path: "{? torrent.tv_path ?}"
      recursive: true
      regexp: '.*\.(avi|mkv|mp4)$'
      retrieve: files
    accept_all: true
    trakt_lookup: true
    all_series:
      parse_only: true
    if:
      - trakt_series_name == None: reject
      - trakt_season == None: reject
    template:
      - rename-serie-name
    move:
      to: "{? torrent.temp_tv_path ?}"
      rename: "{{ trakt_series_name }} - s{{ trakt_season|pad(2) }}e{{ trakt_episode|pad(2) }}"

  download-subtitle-series:
    priority: 3
    filesystem:
      path: "{? torrent.temp_tv_path ?}"
      recursive: true
      regexp: '.*\.(avi|mkv|mp4)$'
      retrieve: files
    template:
      - subtitle

  move-series-server:
    priority: 4
    filesystem:
      path: "{? torrent.temp_tv_path ?}"
      retrieve: files
    disable: [seen, seen_info_hash, retry_failed]
    accept_all: true
    trakt_lookup: true
    all_series:
      parse_only: true
    set:
      notification_message: "âœ…: {{ trakt_series_name }} - s{{ trakt_season|pad(2) }}e{{ trakt_episode|pad(2) }}"
    template:
      - notification
      - rename-serie-name
    sftp_upload:
      host: "{? sftp.host ?}"
      username: "{? sftp.username ?}"
      password: "{? sftp.password ?}"
      to: "{? sftp.tv_path ?}/{{ trakt_series_name }}/S{{ trakt_season | pad(2) }}"
      delete_origin: true

  move-movies:
    priority: 5
    disable: [seen, seen_info_hash, retry_failed]
    regexp:
      from: title
      reject:
        - (s|d)ub(s|bed)
        - trailer
        - screener
        - (s|S)ample
        - Featurettes
    filesystem:
      path: "{? torrent.movie_path ?}"
      recursive: true
      regexp: '.*\.(avi|mkv|mp4|srt)$'
      retrieve: files
    accept_all: true
    imdb_lookup: true
    if:
      - imdb_name == None: reject
    move:
      to: "{? torrent.temp_movie_path ?}"
      rename: '{{ imdb_name }} ({{ imdb_year }})'

  download-subtitle-movies:
    priority: 6
    filesystem:
      path: "{? torrent.temp_movie_path ?}"
      recursive: true
      regexp: '.*\.(avi|mkv|mp4)$'
      retrieve: files
    template:
      - subtitle

  move-movies-server:
    priority: 7
    filesystem:
      path: "{? torrent.temp_movie_path ?}"
      retrieve: files
    disable: [seen, seen_info_hash, retry_failed]
    accept_all: true
    imdb_lookup: true
    all_series:
      parse_only: true
    set:
      notification_message: "âœ…: {{ imdb_name }} ({{ imdb_year }})"
    template:
      - notification
    sftp_upload:
      host: "{? sftp.host ?}"
      username: "{? sftp.username ?}"
      password: "{? sftp.password ?}"
      to: "{? sftp.movie_path ?}/{{ imdb_name }} ({{ imdb_year }})"
      delete_origin: true

  delete-transmission:
    priority: 6
    from_transmission:
      only_complete: true
      host: localhost
      port: 9091
      username: "{? transmission.username ?}"
      password: "{? transmission.password ?}"
    disable: [seen, seen_info_hash]
    if:
      - transmission_progress == 100: accept
      - not transmission_seed_ratio_ok: reject
      - not transmission_idle_limit_ok: reject
    transmission:
      action: remove
      host: localhost
      port: 9091
      username: "{? transmission.username ?}"
      password: "{? transmission.password ?}"

schedules:
  - tasks: '*'
    interval:
      hours: 1
