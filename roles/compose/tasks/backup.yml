- name: Set backup name
  ansible.builtin.set_fact:
    backup_name: "{{ backup.name | default(service_name) }}"

- name: Create an empty autolock file
  ansible.builtin.file:
    path: "/etc/autorestic/autorestic-{{ backup_name }}.lock.yml"
    state: touch
    mode: '0600'

- name: Create autorestic environment folder
  ansible.builtin.file:
    path: /etc/autorestic
    state: directory
    owner: root
    mode: '0700'

- name: Copy autorestic configuration file
  ansible.builtin.template:
    src: autorestic.yml.j2
    dest: /etc/autorestic/autorestic-{{ backup_name }}.yml
    mode: "0600"

- name: Copy ofelia cronjob file
  ansible.builtin.template:
    src: cron.ini.j2
    dest: /etc/autorestic/cron-{{ backup_name }}.ini
    mode: "0600"

# Inspired by ansible.restic
- name: Initialize restic repository (if needed)
  docker_container:
    name: "autorestic-init-{{ backup_name }}"
    image: "cupcakearmy/autorestic:{{ autorestic_version }}"
    state: started
    auto_remove: true
    volumes:
      - "/etc/autorestic/autorestic-{{ backup_name }}.yml:/.autorestic.yml:ro"
    command: "autorestic exec -a -- init"
  register: restic_init
  changed_when: >-
    restic_init.output is defined and
    'created restic repository' in restic_init.output | join(' ')
  failed_when: >-
    restic_init.failed and
    not ('config file already exists' in restic_init.output | join(' ')) and
    not ('config already initialized' in restic_init.output | join(' '))

- name: Create compose file
  ansible.builtin.template:
    src: compose-backup.yml.j2
    dest: "/home/{{ resolved_user }}/compose-{{ backup_name }}-backup.yml"
    mode: "0644"
    owner: "{{ resolved_user }}"
    group: "{{ resolved_user }}"
  vars:
    backup_volumes: "{{ json_array }}"
  notify: "Restart compose-{{ service_name }}"
