#!/usr/bin/env python

# Script to move files from Google Takeout to a
# It takes the dates from the accompanying JSON files or other heuristics

import subprocess
import re
import os
import shutil
import json
from datetime import datetime
import sys

source_directory = sys.argv[1]
destination_directory = sys.argv[2]
move = sys.argv[3]


for root, dirs, files in os.walk(source_directory):
    for filename in files:
        source_file = None
        date = None
        full_path = os.path.join(root, filename)

        if filename.endswith('.json'):
            with open(full_path, 'r') as f:
                data = json.load(f)
                if 'photoTakenTime' not in data:
                    print("Skip " + filename)
                    continue

                # Override iterated filename
                filename = data['title']
                full_path = os.path.join(root, filename)

                # We already ran the script
                if not os.path.exists(full_path):
                    continue

                timestamp = data['photoTakenTime']['timestamp']
                date = datetime.fromtimestamp(int(timestamp))

        # Takeout doesn't include .json for stacking files from Iphone ending with mov and mp4
        elif filename.endswith('mov') or filename.endswith('MOV') or filename.endswith('MP4'):
            cmd = ['ffprobe', '-v', 'quiet', '-print_format', 'json', '-show_format', full_path]
            result = subprocess.check_output(cmd)
            metadata = json.loads(result.decode('utf-8'))
            str_date = metadata['format']['tags'].get('creation_time')
            date = datetime.strptime(str_date, '%Y-%m-%dT%H:%M:%S.000000Z')
        # Stacking files for Pixel files
        elif filename.endswith('MP') and filename.startswith('PXL'):
            date = datetime.strptime(filename[4:], "%Y%m%d_%H%M%S%f.MP")

        if date is None:
            continue

        source_file = full_path
        dest_path = os.path.join(destination_directory, date.strftime('%Y/%m'))
        destination_file = os.path.join(dest_path, filename)

        if move == "true":
            print("Moving" + source_file + " to " + destination_file)
            os.makedirs(dest_path, exist_ok=True)
            try:
                shutil.move(source_file, destination_file)
            except Exception as e:
                print("Not moving: " + source_file)
        else:
            print("Would move " + source_file + " to " + destination_file)
