---
- name: Duckdns
  hosts: all
  tags: duckdns
  tasks:
    - name: Check that duckns.timer is running
      command: systemctl list-timers duckdns.timer
      changed_when: false

    - name: Check that duckns.timer is enabled
      command: systemctl is-enabled duckdns.timer
      changed_when: false

    - name: Check that duckns.service is attached
      command: systemctl list-timers duckdns.timer | grep duckdns.service
      changed_when: false

    - name: Check that duckns.service is attached
      command: grep "duckdns_token=DuckdnsToken" /etc/duckdns.d/default.cfg
      changed_when: false

- name: Syncthing
  hosts: all
  tags: syncthing
  tasks:
    - name: "Syncthing GUI with authentication"
      uri:
        url: "https://localhost:8384"
        validate_certs: false
        status_code: 401

    - name: "Syncthing GUI with credentials"
      uri:
        url: "https://localhost:8384"
        validate_certs: false
        user: SyncthingUser
        password: SyncthingPassword
        status_code: 200

    - name: Check that syncthing is enabled
      command: systemctl is-enabled syncthing@syncthing.service
      changed_when: false

    - name: Check that old syncthing version from debian is not installed
      shell: "syncthing --version | grep -v 1.0.0"
      changed_when: false

- name: Torrent
  hosts: all
  tags: torrent
  tasks:
    - name: save iptables with gid 1500
      shell: "grep 1500 /etc/iptables/rules.v4"
      changed_when: false

    - name: Install curl package
      apt:
        name: curl

    - name: With group vpn - Not accessible in default network namespace
      command: "sg vpn -c 'curl google.com'"
      changed_when: false
      register: result
      failed_when:
        - result.rc != 6

    - name: With group vpn - Not accessible in torrent network namespace
      command: "ip netns exec torrent sg vpn -c 'curl google.com'"
      changed_when: false
      register: result
      failed_when:
        - result.rc != 6

    - name: Without group vpn - Accessible in default network namespace
      command: "curl google.com"
      changed_when: false

    - name: Without group vpn - Accessible in torrent network namespace
      command: "ip netns exec torrent curl google.com"
      changed_when: false

    # Way of emulating an active tun0 is by rewriting
    # Other way would be to have a simple vpn: https://github.com/gawen/pytun
    # But it's good enough
    - name: Change veth_torrent interface to tun0
      shell: |
        ip -n torrent link set veth_torrent down
        ip -n torrent link set veth_torrent name tun0
        ip -n torrent link set tun0 up
        ip -n torrent route add default via 10.44.44.1
      changed_when: false

    - name: With group vpn - Not accessible in default network namespace
      command: "sg vpn -c 'curl google.com'"
      changed_when: false
      register: result
      failed_when:
        - result.rc != 6

    - name: With group vpn - Accessible in torrent network namespace
      command: "ip netns exec torrent sg vpn -c 'curl google.com'"
      changed_when: false
      register: result

    - name: Revert tun0 to veth_torrent again
      shell: |
        ip -n torrent link set tun0 down
        ip -n torrent link set tun0 name veth_torrent
        ip -n torrent link set veth_torrent up
        ip -n torrent route add default via 10.44.44.1
      changed_when: false

    - name: Port is closed for http
      uri:
        url: "http://localhost:9092"
        validate_certs: false
        status_code: 400
      changed_when: false

    - name: Auth is required for transmission
      uri:
        url: "https://localhost:9092"
        validate_certs: false
        status_code: 401
      changed_when: false

    - name: Authentication is open with credentials
      uri:
        url: "https://localhost:9092"
        validate_certs: false
        user: TransmissionUser
        password: TransmissionPassword
        status_code: 200
      changed_when: false

    - name: Register pid
      shell: ps aux | grep "transmission-daemon" | grep -v grep |  awk '{print $2}'
      register: transmission_pid
      changed_when: false

    - name: Get gid
      stat:
        path: "/proc/{{ transmission_pid.stdout }}"
      register: transmission_stat
      changed_when: false

    - name: Verify gid
      assert:
        that: transmission_stat.stat.gid == 1500

    - name: Port is closed for http
      uri:
        url: "http://localhost:9118"
        validate_certs: false
        status_code: 400
      changed_when: false

    - name: Authentication is open with credentials
      uri:
        url: "https://localhost:9118"
        validate_certs: false
        status_code: 200
      changed_when: false

    - name: Check if flexget configuration is valid
      shell: 'ip netns exec torrent flexget check'
      changed_when: false
      args:
        chdir: '/home/torrent/flexget'

    - name: Register flexget db stat
      stat:
        path: /home/torrent/flexget/db-config.sqlite
      register: flexget_db_result

    - name: Check if flex database exists
      assert:
        that: flexget_db_result.stat.exists

    - name: Check that flexget is enabled
      command: systemctl is-enabled flexget
      changed_when: false

    - name: Check that telegram-bot is enabled
      command: systemctl is-enabled telegram-bot
      changed_when: false

- name: Jellyfin
  hosts: all
  tags: jellyfin
  tasks:
    - name: Check if jellyfin server is running
      uri:
        url: "http://localhost:8096/web/index.html"
        status_code: 200
      changed_when: false

- name: Mount
  hosts: all
  tags: mount
  tasks:
    - name: Stat first folder
      stat:
        path: "/mnt/dir1"
      register: mount1_result

    - name: Check if it's mounted correctly
      assert:
        that: mount1_result.stat.exists and mount1_result.stat.isdir

    - name: Stat second folder
      stat:
        path: "/mnt/dir2/file"
      register: mount2_result

    - name: Check if it's mounted correctly
      assert:
        that: mount2_result.stat.exists

    - name: Check that it belongs to mount user
      assert:
        that: mount2_result.stat.uid == 1200

    - name: Check that mount1 is enabled
      command: systemctl is-enabled mnt-dir1.mount
      changed_when: false

    - name: Check that mount1 is enabled
      command: systemctl is-enabled mnt-dir2.mount
      changed_when: false
