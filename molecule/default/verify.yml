---
- name: Add hosts
  hosts: all
  become: true
  tasks:
    - name: Add host to /etc/hosts
      ansible.builtin.lineinfile:
        path: /etc/hosts
        line: "{{ ansible_host }} {{ item }}.example.com"
        state: present
      with_items:
        - syncthing
        - torrent
        - jackett
        - files

- name: Syncthing
  hosts: all
  tags: syncthing
  tasks:
    - name: "Syncthing is not bound to network interface"
      ansible.builtin.wait_for:
        host: "{{ ansible_host }}"
        port: "8384"
        state: stopped
        timeout: 5

    - name: "Syncthing HTTP redirects to HTTPS"
      ansible.builtin.uri:
        url: "http://syncthing.example.com"
        follow_redirects: false
        status_code: 308

    - name: "Syncthing GUI with authentication"
      ansible.builtin.uri:
        url: "https://syncthing.example.com"
        validate_certs: false
        status_code: 401

    - name: "Syncthing GUI with credentials"
      ansible.builtin.uri:
        url: "https://syncthing.example.com"
        validate_certs: false
        user: SyncthingUser
        password: SyncthingPassword
        status_code: 200

- name: NextCloud
  hosts: all
  tags: nextcloud
  tasks:
    - name: Check that nextcloud server is running
      ansible.builtin.uri:
        url: "https://files.example.com"
        validate_certs: false
        status_code: 200

- name: Emby
  hosts: all
  tags: emby
  tasks:
    - name: Check if emby server is running
      ansible.builtin.uri:
        url: "http://localhost:8097/web/index.html"
        status_code: 200

- name: Jellyfin
  hosts: all
  tags: jellyfin
  tasks:
    - name: Check if jellyfin server is running
      ansible.builtin.uri:
        url: "http://localhost:8096/web/index.html"
        status_code: 200

- name: Torrent
  hosts: all
  tags: torrent
  become: true
  tasks:
    - name: Remove ip rule
      community.docker.docker_container_exec:
        container: torrent-vpn-1
        command: /bin/sh -c "ip rule delete priority 10 from all lookup main"
      register: ip_rule
      # Exit code 2 is for the cases when the rule does not exist
      failed_when: ip_rule.rc != 2

    - name: VPN container has access to the internet
      community.docker.docker_container_exec:
        container: torrent-vpn-1
        command: /bin/sh -c "apk update && apk add curl && curl google.com"

    - name: Jackett container has access to the internet
      community.docker.docker_container_exec:
        container: torrent-jackett-1
        command: /bin/sh -c "curl google.com"

    - name: Jackett container has access to the internet via 1500 group
      community.docker.docker_container_exec:
        container: torrent-jackett-1
        # Group abc is created by linuxserver automatically
        command: /bin/sh -c "apk update && apk add shadow-login && sg abc -c 'curl google.com'"

    - name: Jackett container runs with gid 1500
      community.docker.docker_container_exec:
        container: torrent-jackett-1
        command: /bin/sh -c "ps ax o gid,comm | grep -e 'jackett$' | cut -f 2 -d ' '"
      register: result
      failed_when:
        - result.stdout != '1500'

    - name: Add temporary rule that overrides jackett
      community.docker.docker_container_exec:
        container: torrent-vpn-1
        command: /bin/sh -c "ip rule add priority 10 from all lookup main"

    - name: Internet shouldn't work after VPN is down
      community.docker.docker_container_exec:
        container: torrent-jackett-1
        command: /bin/sh -c "sg abc -c 'curl google.com'"
      changed_when: false
      register: result
      failed_when:
        - result.rc != 6

    - name: Internet should work even if VPN is down
      community.docker.docker_container_exec:
        container: torrent-jackett-1
        command: /bin/sh -c "curl google.com"
      changed_when: false

    - name: Remove ip rule
      community.docker.docker_container_exec:
        container: torrent-vpn-1
        command: /bin/sh -c "ip rule delete priority 10 from all lookup main"

    - name: Check the configuration from flexget is correct
      community.docker.docker_container_exec:
        container: torrent-flexget-1
        command: /bin/sh -c "flexget check"

    - name: Register flexget db stat
      ansible.builtin.stat:
        path: /home/torrent/flexget/config/db-config.sqlite
      register: flexget_db_result

    - name: Check if flex database exists
      ansible.builtin.assert:
        that: flexget_db_result.stat.exists

    - name: "Transmission GUI with authentication"
      ansible.builtin.uri:
        url: "https://torrents.example.com"
        validate_certs: false
        status_code: 401

    - name: "Transmission works with credentials"
      ansible.builtin.uri:
        url: "https://torrents.example.com"
        validate_certs: false
        user: TransmissionUser
        password: TransmissionPassword
        status_code: 200

    - name: "Jackett works with credentials"
      ansible.builtin.uri:
        url: "https://jackett.example.com"
        validate_certs: false
        status_code: 200

- name: Mount
  hosts: all
  tags: mount
  tasks:
    - name: Stat first folder
      stat:
        path: "/mnt/dir1"
      register: mount1_result

    - name: Check if it's mounted correctly
      assert:
        that: mount1_result.stat.exists and mount1_result.stat.isdir

    - name: Stat second folder
      stat:
        path: "/mnt/dir2/file"
      register: mount2_result

    - name: Check if it's mounted correctly
      assert:
        that: mount2_result.stat.exists

    - name: Check that it belongs to mount user
      assert:
        that: mount2_result.stat.uid == 1200

    - name: Check that mount1 is enabled
      command: systemctl is-enabled mnt-dir1.mount
      changed_when: false

    - name: Check that mount1 is enabled
      command: systemctl is-enabled mnt-dir2.mount
      changed_when: false
